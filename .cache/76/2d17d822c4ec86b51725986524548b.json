{"id":"../../node_modules/axios/lib/core/Axios.js","dependencies":[{"name":"C:\\Users\\login\\Desktop\\4-natours\\package.json","includedInParent":true,"mtime":1745304383819},{"name":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\package.json","includedInParent":true,"mtime":1745212461738},{"name":"./../utils","loc":{"line":3,"column":20,"index":35},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\Axios.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\utils.js"},{"name":"../helpers/buildURL","loc":{"line":4,"column":23,"index":73},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\Axios.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\helpers\\buildURL.js"},{"name":"./InterceptorManager","loc":{"line":5,"column":33,"index":130},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\Axios.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\InterceptorManager.js"},{"name":"./dispatchRequest","loc":{"line":6,"column":30,"index":185},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\Axios.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\dispatchRequest.js"},{"name":"./mergeConfig","loc":{"line":7,"column":26,"index":233},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\Axios.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\mergeConfig.js"},{"name":"./buildFullPath","loc":{"line":8,"column":28,"index":279},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\Axios.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\buildFullPath.js"},{"name":"../helpers/validator","loc":{"line":9,"column":24,"index":323},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\Axios.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\helpers\\validator.js"}],"generated":{"js":"'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('../helpers/buildURL');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\nvar buildFullPath = require('./buildFullPath');\nvar validator = require('../helpers/validator');\n\nvar validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n * @param {?Object} config\n */\nAxios.prototype.request = function request(configOrUrl, config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof configOrUrl === 'string') {\n    config = config || {};\n    config.url = configOrUrl;\n  } else {\n    config = configOrUrl || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  var transitional = config.transitional;\n\n  if (transitional !== undefined) {\n    validator.assertOptions(transitional, {\n      silentJSONParsing: validators.transitional(validators.boolean),\n      forcedJSONParsing: validators.transitional(validators.boolean),\n      clarifyTimeoutError: validators.transitional(validators.boolean)\n    }, false);\n  }\n\n  var paramsSerializer = config.paramsSerializer;\n\n  if (paramsSerializer != null) {\n    if (utils.isFunction(paramsSerializer)) {\n      config.paramsSerializer = {\n        serialize: paramsSerializer\n      };\n    } else {\n      validator.assertOptions(paramsSerializer, {\n        encode: validators.function,\n        serialize: validators.function\n      }, true);\n    }\n  }\n\n  // filter out skipped interceptors\n  var requestInterceptorChain = [];\n  var synchronousRequestInterceptors = true;\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n      return;\n    }\n\n    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var responseInterceptorChain = [];\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var promise;\n\n  if (!synchronousRequestInterceptors) {\n    var chain = [dispatchRequest, undefined];\n\n    Array.prototype.unshift.apply(chain, requestInterceptorChain);\n    chain = chain.concat(responseInterceptorChain);\n\n    promise = Promise.resolve(config);\n    while (chain.length) {\n      promise = promise.then(chain.shift(), chain.shift());\n    }\n\n    return promise;\n  }\n\n\n  var newConfig = config;\n  while (requestInterceptorChain.length) {\n    var onFulfilled = requestInterceptorChain.shift();\n    var onRejected = requestInterceptorChain.shift();\n    try {\n      newConfig = onFulfilled(newConfig);\n    } catch (error) {\n      onRejected(error);\n      break;\n    }\n  }\n\n  try {\n    promise = dispatchRequest(newConfig);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n\n  while (responseInterceptorChain.length) {\n    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  var fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);\n  return buildURL(fullPath, config.params, config.paramsSerializer);\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method: method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url: url,\n        data: data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nmodule.exports = Axios;\n"},"sourceMaps":null,"error":null,"hash":"f7efaa64b9174225754c86570cf87ada","cacheData":{"env":{}}}