{"id":"../../node_modules/axios/lib/adapters/xhr.js","dependencies":[{"name":"C:\\Users\\login\\Desktop\\4-natours\\package.json","includedInParent":true,"mtime":1745304383819},{"name":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\package.json","includedInParent":true,"mtime":1745212461738},{"name":"./../utils","loc":{"line":3,"column":20,"index":35},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\adapters\\xhr.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\utils.js"},{"name":"./../core/settle","loc":{"line":4,"column":21,"index":71},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\adapters\\xhr.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\settle.js"},{"name":"./../helpers/cookies","loc":{"line":5,"column":22,"index":114},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\adapters\\xhr.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\helpers\\cookies.js"},{"name":"./../helpers/buildURL","loc":{"line":6,"column":23,"index":162},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\adapters\\xhr.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\helpers\\buildURL.js"},{"name":"../core/buildFullPath","loc":{"line":7,"column":28,"index":216},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\adapters\\xhr.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\buildFullPath.js"},{"name":"./../helpers/parseHeaders","loc":{"line":8,"column":27,"index":269},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\adapters\\xhr.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\helpers\\parseHeaders.js"},{"name":"./../helpers/isURLSameOrigin","loc":{"line":9,"column":30,"index":329},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\adapters\\xhr.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\helpers\\isURLSameOrigin.js"},{"name":"../defaults/transitional","loc":{"line":10,"column":35,"index":397},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\adapters\\xhr.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\defaults\\transitional.js"},{"name":"../core/AxiosError","loc":{"line":11,"column":25,"index":451},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\adapters\\xhr.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\AxiosError.js"},{"name":"../cancel/CanceledError","loc":{"line":12,"column":28,"index":502},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\adapters\\xhr.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\cancel\\CanceledError.js"},{"name":"../helpers/parseProtocol","loc":{"line":13,"column":28,"index":558},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\adapters\\xhr.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\helpers\\parseProtocol.js"},{"name":"../platform","loc":{"line":14,"column":23,"index":610},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\adapters\\xhr.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\platform\\index.js"}],"generated":{"js":"'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar cookies = require('./../helpers/cookies');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar transitionalDefaults = require('../defaults/transitional');\nvar AxiosError = require('../core/AxiosError');\nvar CanceledError = require('../cancel/CanceledError');\nvar parseProtocol = require('../helpers/parseProtocol');\nvar platform = require('../platform');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var responseType = config.responseType;\n    var withXSRFToken = config.withXSRFToken;\n    var onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);\n\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?\n        request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      var transitional = config.transitional || transitionalDefaults;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config));\n      if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(fullPath))) {\n        // Add xsrf header\n        var xsrfValue = config.xsrfHeaderName && config.xsrfCookieName && cookies.read(config.xsrfCookieName);\n        if (xsrfValue) {\n          requestHeaders[config.xsrfHeaderName] = xsrfValue;\n        }\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = function(cancel) {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    // false, 0 (zero number), and '' (empty string) are valid JSON values\n    if (!requestData && requestData !== false && requestData !== 0 && requestData !== '') {\n      requestData = null;\n    }\n\n    var protocol = parseProtocol(fullPath);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n"},"sourceMaps":null,"error":null,"hash":"b7ea6f9c5956b7130ac7bc305a6a17d4","cacheData":{"env":{}}}