{"id":"../../node_modules/axios/lib/core/dispatchRequest.js","dependencies":[{"name":"C:\\Users\\login\\Desktop\\4-natours\\package.json","includedInParent":true,"mtime":1745304383819},{"name":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\package.json","includedInParent":true,"mtime":1745212461738},{"name":"./../utils","loc":{"line":3,"column":20,"index":35},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\dispatchRequest.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\utils.js"},{"name":"./transformData","loc":{"line":4,"column":28,"index":78},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\dispatchRequest.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\transformData.js"},{"name":"../cancel/isCancel","loc":{"line":5,"column":23,"index":121},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\dispatchRequest.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\cancel\\isCancel.js"},{"name":"../defaults","loc":{"line":6,"column":23,"index":167},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\dispatchRequest.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\defaults\\index.js"},{"name":"../cancel/CanceledError","loc":{"line":7,"column":28,"index":211},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\dispatchRequest.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\cancel\\CanceledError.js"},{"name":"../helpers/normalizeHeaderName","loc":{"line":8,"column":34,"index":273},"parent":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\core\\dispatchRequest.js","resolved":"C:\\Users\\login\\Desktop\\4-natours\\node_modules\\axios\\lib\\helpers\\normalizeHeaderName.js"}],"generated":{"js":"'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar CanceledError = require('../cancel/CanceledError');\nvar normalizeHeaderName = require('../helpers/normalizeHeaderName');\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    null,\n    config.transformRequest\n  );\n\n  normalizeHeaderName(config.headers, 'Accept');\n  normalizeHeaderName(config.headers, 'Content-Type');\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      response.status,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          reason.response.status,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n"},"sourceMaps":null,"error":null,"hash":"cc7da19b755e5ddc5bffc1813cba8d3c","cacheData":{"env":{}}}